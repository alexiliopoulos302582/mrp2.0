@model OrderViewModel

@{
    ViewData["Title"] = "Create Order";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Create Order</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        .font-weight-bold-custom {
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container" style="margin-left:35px; margin-top:20px">
        <h1>Create Order</h1>
        <a class="btn btn-warning m-2 col-2" style="margin-left:45px" href="/">Home Page</a>
        <button type="button" class="btn btn-success" onclick="calculateTotalCost()">Calculate Total Cost</button>
        <hr />

        @using (Html.BeginForm("Create", "Orders", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <div class="row mb-3">
                <div class="col-md-4">
                    @Html.LabelFor(m => m.Name, new { @class = "control-label" })
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.LabelFor(m => m.Po, "P(urchase) O(rder)", new { @class = "control-label" })
                    @Html.TextBoxFor(m => m.Po, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(m => m.Po, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.LabelFor(m => m.OrderTotalCost, "Total Cost:", new { @class = "control-label" })
                    @Html.TextBoxFor(m => m.OrderTotalCost, new { @class = "form-control", required = "required", id = "TotalCost" })
                    @Html.ValidationMessageFor(m => m.OrderTotalCost, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-2">
                    @Html.LabelFor(m => m.Quantity, "Order Quantity", new { @class = "control-label" })
                    @Html.TextBoxFor(m => m.Quantity, new { @class = "form-control", required = "required", id = "OrderQuantity" })
                    @Html.ValidationMessageFor(m => m.Quantity, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-4">
                    @Html.LabelFor(m => m.Notes, new { @class = "control-label" })
                    @Html.TextAreaFor(m => m.Notes, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Notes, "", new { @class = "text-danger" })
                </div>
            </div>

            <hr />

            <div class="row mb-3">
                <div class="col-md-6">
                    @Html.LabelFor(m => m.RecipeId, "Select a Recipe or Null if not required", new { @class = "control-label font-weight-bold-custom" })
                    @Html.DropDownListFor(m => m.RecipeId, Model.Recipes, "Select a Recipe", new { @class = "form-control", onchange = "getRecipeCost(this)" })
                </div>
                <div class="col-md-3">
                    @Html.LabelFor(m => m.RecipeCost, "Recipe Cost", new { @class = "control-label" })
                    @Html.TextBoxFor(m => m.RecipeCost, new { @class = "form-control", required = "required", id = "RecipeCost" })
                </div>
            </div>
            <br />
            <hr />
            <br />

            <div class="row mb-3">
                <div class="col-md-12">
                    <h4>Raw Materials</h4>
                    <button type="button" class="btn btn-primary" onclick="addRawMaterial()">Add Raw Material</button>
                    <button type="button" class="btn btn-info"
                    onclick="calculateRawMaterialCost()">Calculate Materials Cost</button>
                </div>
            </div>

<div id="rawMaterialsContainer">
                <div class="row mb-3 rawMaterialItem  ">
        <div class="col-5">
            @Html.Label("RawMaterial", "Select Raw Material", new { @class = "control-label font-weight-bold-custom" })
            @Html.DropDownList("RawMaterialsIds[0]", Model.RawMaterials, "Select a Raw Material", new { @class = "form-control", onchange = "fetchUnitCost(this)" })
        </div>
        <div class="col-2">
            @Html.Label("Quantity", "Quantity", new { @class = "control-label" })
            <input type="text" name="Quantities[0]" class="form-control" />
        </div>
        <div class="col-2">
            @Html.Label("UnitCost", "Unit Cost", new { @class = "control-label" })
            <input type="text" name="UnitCosts[0]" class="form-control"   />
        </div>
        <div class="col-2">
            <button type="button" class="btn btn-danger mt-4" onclick="removeRawMaterial(this)">Remove</button>
        </div>
    </div>
</div>
<div class="row mb-3">
    <div class="col-md-3">
        @Html.LabelFor(m => m.RawMaterialCost, "Raw Materials Total Cost:", new { @class = "control-label  " })
        @Html.TextBoxFor(m => m.RawMaterialCost,
                    new { @class = "form-control", required = "required", id = "RawMaterialCost" })

    </div>


            </div>

            <hr />

            <div class="form-group  ">
                <input type="submit" value="Create" class="btn btn-success col-2" />
                <a href="@Url.Action("Index", "Orders")" class="btn btn-danger mt-2 col-2">Cancel</a>
            </div>
        }
    </div>

    <script>
        let rawMaterialCount = 1;

        function addRawMaterial() {
            const container = document.getElementById('rawMaterialsContainer');
            const newRawMaterial = container.firstElementChild.cloneNode(true);
            newRawMaterial.querySelectorAll('select, input').forEach(element => {
                const name = element.name;
                if (name) {
                    element.name = name.replace(/\d+/, rawMaterialCount);
                }
                element.value = '';
            });
            container.appendChild(newRawMaterial);
            rawMaterialCount++;
        }

        function removeRawMaterial(button) {
            const container = document.getElementById('rawMaterialsContainer');
            if (container.children.length > 1) {
                button.closest('.rawMaterialItem').remove();
            }
        }

        function fetchUnitCost(select) {
            const unitCostInput = select.closest('.rawMaterialItem').querySelector('input[name*="UnitCosts"]');
            const rawMaterialId = select.value;
            // Assuming you have an endpoint to get the unit cost of a raw material
            fetch(`/Orders/GetUnitCost?rawMaterialId=${rawMaterialId}`)
                .then(response => response.json())
                .then(data => {
                    unitCostInput.value = data.unitCost;
                });
        }

        function calculateRawMaterialCost() {
            var container = document.getElementById('rawMaterialsContainer');
            var items = container.getElementsByClassName('rawMaterialItem');
            var totalCost = 0;

            for (var i = 0; i < items.length; i++) {
                var quantity = items[i].querySelector('input[name^="Quantities"]').value;
                var unitCost = items[i].querySelector('input[name^="UnitCosts"]').value;
                if (quantity && unitCost) {
                    totalCost += parseFloat(quantity) * parseFloat(unitCost);
                }
            }

            document.getElementById('RawMaterialCost').value = totalCost.toFixed(4);
        }



        function calculateTotalCost() {
            var rawMaterialCost = parseFloat(document.getElementById('RawMaterialCost').value);
            var recipeCost = parseFloat(document.getElementById('RecipeCost').value);
            var OrderQuantity = parseFloat(document.getElementById('OrderQuantity').value);

            var totalCost = (rawMaterialCost + recipeCost) * OrderQuantity;
            document.getElementById('TotalCost').value = totalCost.toFixed(4);
        }




        function getRecipeCost(select) {
            const recipeId = select.value;
            // Assuming you have an endpoint to get the cost of a recipe
            fetch(`/Orders/GetRecipeCost?recipeId=${recipeId}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('RecipeCost').value = data.totalcost.toFixed(4);
                });
        }
    </script>
</body>
</html>
