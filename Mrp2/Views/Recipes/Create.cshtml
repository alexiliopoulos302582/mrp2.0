@model Mrp2.Models.RecipeViewModel

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Create</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
          rel="stylesheet"
          integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
          crossorigin="anonymous">
</head>


<body>
    <div class="container">
        <h1>Create Recipe</h1>
        <hr />

        @using (Html.BeginForm("Create", "Recipes", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <div class="row">
                <div class="col-md-11">

                    <div class="  mb-3">
                        <h4>Recipe Information</h4>
                    </div>

                    <div class="  mb-3">
                        <a class=" btn btn-success m-2 col-2" style="margin-left:45px" href="/Home/LandingPage">home</a>
                        <a class="btn btn-info m-2 col-2" asp-action="Index">Back to List</a>
                      
                    </div>


                    <div class="  mb-3">
                    </div>


                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label asp-for="RecipeName" class="control-label"></label>
                            <input asp-for="RecipeName" class="form-control" required />
                            <span asp-validation-for="RecipeName" class="text-danger"></span>
                        </div>
                        <div class="col-md-2">
                            <label asp-for="TotalCost" class="control-label"></label>
                            <input asp-for="TotalCost" class="form-control" required />
                            <span asp-validation-for="TotalCost" class="text-danger"></span>
                        </div>




                        <div class="col-md-2">
                            <label asp-for="Quantity" class="control-label">Num of Materials</label>
                            <input asp-for="Quantity" class="form-control" required />
                            <span asp-validation-for="Quantity" class="text-danger"></span>
                        </div>
                    </div>

                    <hr />
                    <h4 class="mt-4">Select Raw Materialsrrr</h4>
                    <hr />

                    <div id="rawMaterials">
                        @for (int i = 0; i < Model.RawMaterials.Count; i++)
                        {
                            <div class="raw-material-group row mb-3">
                                <div class="col-md-5">
                                    <label for="rawMaterial_@i">Raw Material</label>
                                  
                                    
                                    <select id="rawMaterial_@i" name="RawMaterials[@i].RawMaterialId" class="form-control raw-material-select" onchange="fetchUnitCost(this)" required>
                                        <option value="">Select Material</option>
                                        @foreach (var option in Model.RawMaterialOptions)
                                        {
                                            <option value="@option.Value">@option.Text</option>
                                        }
                                    </select>


                                    <span class="text-danger" data-valmsg-for="RawMaterials[@i].RawMaterialId" data-valmsg-replace="true"></span>
                                </div>
                                <div class="col-md-2">
                                    <label for="quantity_@i">Quantity</label>
                                    <input type="text" id="quantity_@i" name="RawMaterials[@i].Quantity" class="form-control" required />
                                    <span class="text-danger" data-valmsg-for="RawMaterials[@i].Quantity" data-valmsg-replace="true"></span>
                                </div>
                                <div class="col-md-2">
                                    <label for="cost_@i">Cost</label>
                                    <input type="text" id="cost_@i" name="RawMaterials[@i].Cost" class="form-control raw-material-cost" required />
                                    <span class="text-danger" data-valmsg-for="RawMaterials[@i].Cost" data-valmsg-replace="true"></span>
                                </div>
                                <div class="col-md-2 d-flex align-items-end">
                                    <button type="button" class="btn btn-danger" onclick="removeRawMaterial(this)">Remove</button>
                                </div>
                            </div>
                        }
                    </div>
                   


                    <div class="mb-3">
                        <button type="button" class="btn btn-warning" onclick="addRawMaterial()">Add Raw Material</button>
                    </div>

                    <hr />
                    <div class="form-group  ">
                        <input type="submit" value="Create" class="btn btn-success col-2" />
                        <button type="button" class="btn btn-info ms-2 col-2" onclick="calculateTotalCost()">Calculate</button>
                       
                    </div>
                </div>
            </div>
        }


    </div>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
        }
    }
    <script>
        let rawMaterialIndex = 1;

        function addRawMaterial() {
            let rawMaterialsDiv = document.getElementById("rawMaterials");
            let newRawMaterial = rawMaterialsDiv.children[0].cloneNode(true);

            newRawMaterial.querySelectorAll("select, input").forEach((input, index) => {
                input.id = input.name.split('[')[0] + '_' + rawMaterialIndex;
                input.name = input.name.replace(/\[\d+\]/, '[' + rawMaterialIndex + ']');
                input.value = "";
            });

            rawMaterialsDiv.appendChild(newRawMaterial);
            rawMaterialIndex++;
        }



        function removeRawMaterial(button) {
            let rawMaterialsDiv = document.getElementById("rawMaterials");
            if (rawMaterialsDiv.children.length > 1) {
                button.closest('.raw-material-group').remove();
            }
        }




        function fetchUnitCost(selectElement) {
            const rawMaterialId = selectElement.value;
            const costInput = selectElement.closest('.raw-material-group').querySelector('.raw-material-cost');

            fetch(`/Recipes/GetUnitCost?rawMaterialId=${rawMaterialId}`)
                .then(response => response.json())
                .then(data => {
                    costInput.value = data.unitCost;
                })
                .catch(error => console.error('Error fetching unit cost:', error));
        }




        function calculateTotalCost() {
            let totalCost = 0;
            let rawMaterialCount = 0;

            document.querySelectorAll('.raw-material-group').forEach(group => {


                const quantity = parseFloat(group.querySelector('input[name$="Quantity"]').value.replace(',', '.')) || 0;
                const cost = parseFloat(group.querySelector('input[name$="Cost"]').value.replace(',', '.')) || 0;



                totalCost += quantity * cost;
                rawMaterialCount++;
            });

            document.querySelector('input[name="TotalCost"]').value = totalCost.toFixed(2);
            //  document.querySelector('input[name="TotalCost"]').value = totalCost.toFixed(2).replace('.', ',');
            document.querySelector('input[name="Quantity"]').value = rawMaterialCount;
        }






    </script>

</body>
</html>
